// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `image.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

/**
 * A single image served as a sequence of bytes
 **/
public class ImageData extends Ice.ObjectImpl
{
    public ImageData()
    {
    }

    public ImageData(Time timeStamp, ImageDescription description, byte[] pixelData)
    {
        this.timeStamp = timeStamp;
        this.description = description;
        this.pixelData = pixelData;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new ImageData();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::ImageData"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        timeStamp.__write(__os);
        __os.writeObject(description);
        ByteSeqHelper.write(__os, pixelData);
        __os.endWriteSlice();
    }

    private class Patcher implements IceInternal.Patcher
    {
        public void
        patch(Ice.Object v)
        {
            if(v == null || v instanceof ImageDescription)
            {
                description = (ImageDescription)v;
            }
            else
            {
                IceInternal.Ex.throwUOE(type(), v);
            }
        }

        public String
        type()
        {
            return "::jderobot::ImageDescription";
        }
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        timeStamp = new Time();
        timeStamp.__read(__is);
        __is.readObject(new Patcher());
        pixelData = ByteSeqHelper.read(__is);
        __is.endReadSlice();
    }

    /**
     * < TimeStamp of Data
     **/
    public Time timeStamp;

    /**
     * < ImageDescription of Data, for convienence purposes
     **/
    public ImageDescription description;

    /**
     * < The image data itself. The structure of this byte sequence
     * depends on the image format and compression.
     **/
    public byte[] pixelData;

    public static final long serialVersionUID = 6669252272407529118L;
}
